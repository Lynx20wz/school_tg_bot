import json

from aiogram import Router, F
from aiogram.filters import Command
from loguru import logger

from bot.bin import main_button, make_debug_button
from bot.classes import UserClass, BaseDate

db = BaseDate()
debug_router = Router()


@debug_router.message(F.text.lower() == 'debug')
@UserClass.get_user()
async def developer(message, user):
    user.debug = True
    await user.save_settings(debug=user.debug, save_db=True)
    logger.warning(f'{user.username} –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!')
    await message.answer(f'–£–¥–∞—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, {user.username}! üòâ', reply_markup=main_button(user))


@debug_router.message(F.text == '–ö–æ–º–∞–Ω–¥—ã –¥–µ–±–∞–≥–∞')
async def command_debug(message):
    await message.answer(
        f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Ç—É—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–ª—è —Ç–µ–±—è –∫–æ–º–∞–Ω–¥—ã!
    
**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**:
**/sql** __<command>__ | __<args>__ - —Å–¥–µ–ª–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å
**/user** (/u) __<username>__ - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
**/users** - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
**/logfile** - –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞""",
        reply_markup=make_debug_button(),
        parse_mode='Markdown',
    )


@debug_router.message(F.text == '–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def get_user(message):
    user_data = await db(message.from_user.username)
    await message.answer(json.dumps(user_data, indent=4, ensure_ascii=False))


@debug_router.message(F.text == '–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
@UserClass.get_user()
async def exit_debug_commands(message, user):
    logger.debug(f'Came out of the debug commands ({message.from_user.username})')
    await message.answer(
        '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        reply_markup=main_button(user),
        disable_notification=user.setting_notification,
    )


@debug_router.message(F.text, Command('sql'))
async def sql_debug(message, command):
    command_args = command.args
    if command_args is None:
        await message.answer('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–∞–Ω–¥—ã!')
        return
    else:
        command, *args = command_args.split(' | ')
        logger.debug(f'{command=} - {args=}')
        res = await db.custom_command(command, args)
        await message.answer(f'–û—Ç–≤–µ—Ç:\n{str(res)}')


@debug_router.message(F.text, Command('u', 'user', 'users'))
async def sql_request(message, command):
    command_args = command.args
    command = command.command
    # logger.debug(f'{command=} - {command_args=}')

    if command == 'users':
        user_data = await db()
        await message.answer(json.dumps(user_data, indent=4, ensure_ascii=False))
    elif command_args is not None:
        user_data = await db(command_args)
        if user_data is None:
            await message.answer(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "{command_args}" –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω!')
        else:
            await message.answer(json.dumps(user_data, indent=4, ensure_ascii=False))
    else:
        await get_user(message)


@debug_router.message(F.text, Command('logfile'))
async def logfile(message):
    with open('temp/log.log', 'r', encoding='utf-8') as logfile:
        await message.answer('\n'.join(logfile.readlines()))


@debug_router.message(F.text == '–í—ã–∫–ª. –¥–µ–±–∞–≥')
@UserClass.get_user()
async def remove_debug(message, user):
    user.debug = False
    user.save_settings(debug=user.debug, save_db=True, database=db)
    logger.debug(f'{user.username} –æ—Ç–∫–ª—é—á–∏–ª —Ä–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.')
    await message.answer(f'–í—ã–∫–ª—é—á–∞—é –¥–µ–±–∞–≥...', reply_markup=main_button(user))
