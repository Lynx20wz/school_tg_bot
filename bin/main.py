import json
import os
import sqlite3
import sys
from datetime import datetime
from typing import Union, Tuple, Optional

import telebot
from dotenv import load_dotenv
from loguru import logger
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, Message

import parser_school as ps

log_format = '{time:H:mm:ss} | "{function}" | {line} | <level>{level}</level> | {message}'

logger.remove()
logger.add(
        sink=sys.stdout,
        level='DEBUG',
        format=log_format,
)
logger.add(
        sink='..//temp//log.log',
        level='INFO',
        mode='a',
        format=log_format,
)

load_dotenv()

API_BOT = os.getenv('API_BOT')
ADMIN_ID = int(os.getenv('MY_ID'))

bot = telebot.TeleBot(API_BOT)


class user_class:
    users = []

    def __init__(self, username: str, userid: int, debug: bool = False, setting_dw: bool = False, setting_notification: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç user_class.

        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param userid: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param debug: –§–ª–∞–≥ –æ—Ç–ª–∞–¥–∫–∏.
        :param setting_dw: –§–ª–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        :param setting_notification: –§–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
        self.data = (username, userid, setting_dw, setting_notification, debug)
        self.username: str = username
        self.userid: int = userid
        self.debug: bool = debug
        self.setting_dw: bool = setting_dw
        self.setting_notification: bool = setting_notification

        # –°–ª–µ–¥—É—é—â–∏–π –∫–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –º–∞—Å—Å–∏–≤–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Å—Å–∏–≤–µ
        existing_user = self.get_user_from_massive(username, 2)
        if existing_user:
            existing_user.debug = debug
            existing_user.setting_dw = setting_dw
            existing_user.setting_notification = setting_notification
        else:
            self.users.append(self)

        # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ user_record –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª –∫—ç—à–∞
        db.add_user(self.data)
        # cache.user_record(self)

    @classmethod
    def get_user_from_massive(cls, username: str, mode: int = 1) -> Optional[Union[Tuple[str, int, bool, bool, bool], 'user_class', int]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        :param mode: –†–µ–∂–∏–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
        :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –º–∞—Å—Å–∏–≤–∞ users –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞.
         –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ, —Ç–æ None.
        """
        for i, user in enumerate(cls.users):
            if user.username == username:
                match mode:
                    case 1:
                        return user.data
                    case 2:
                        return user
                    case 3:
                        return i
        return None

    @staticmethod
    def get_user():
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞.
        :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—ë—Ä—Ç–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """

        def wrapper(func):
            def wrapped(message: Union[Message, user_class], *args, **kwargs):
                if type(message) is user_class:
                    user = message
                else:
                    existing_user = user_class.get_user_from_massive(message.from_user.username, 2)
                    if existing_user:
                        user = existing_user
                    else:
                        user_db = db.get_user(message.from_user.username)
                        user = None
                        if user_db:
                            user = user_class(
                                    message.from_user.username,
                                    message.from_user.id,
                                    user_db.get('debug', False),
                                    user_db.get('setting_dw', True),
                                    user_db.get('setting_notification', True)
                            )
                return func(message=message, user=user, *args, **kwargs)

            return wrapped

        return wrapper

    def save_settings(
        self, database: 'DataBase', setting_dw: bool = None, setting_notification: bool = None, debug: bool = None, save_cache: bool = False
        ):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        :param database: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        :param setting_dw: –§–ª–∞–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        :param setting_notification: –§–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        :param debug: –§–ª–∞–≥ –æ—Ç–ª–∞–¥–∫–∏.
        :param save_cache: –ï—Å–ª–∏ True, —Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –º–∞—Å—Å–∏–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π,
        –∞ —Ç–∞–∫–∂–µ –∏ –≤ —Ñ–∞–π–ª–µ –∫—ç—à–∞.

        :return: –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π —Ñ–∞–π–ª –∫—ç—à–∞
        """
        if setting_dw is None:
            setting_dw = self.setting_dw
        if setting_notification is None:
            setting_notification = self.setting_notification
        if debug is None:
            debug = self.debug

        self.setting_dw = setting_dw
        self.setting_notification = setting_notification
        self.debug = debug

        user_index = user_class.get_user_from_massive(self.username, 3)
        if user_index is not None:
            user_class.users[user_index].setting_dw = setting_dw
            user_class.users[user_index].setting_notification = setting_notification
            user_class.users[user_index].debug = debug

        if save_cache:
            with sqlite3.connect(database.path) as db:
                cursor = db.cursor()
                cursor.execute(
                        'UPDATE users SET debug = ?, setting_dw = ?, setting_notification = ? WHERE username = ?',
                        (self.debug, self.setting_dw, self.setting_notification, self.username)
                    )

            logger.info(f'–ù–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.username} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!')

class DataBase:
    def __init__(self, path: str):
        self.path = path

    def add_user(self, user: tuple):
        with sqlite3.connect(self.path) as db:
            cursor = db.cursor()

            cursor.execute('SELECT userid FROM users WHERE userid = ?', (user[1],))
            if cursor.fetchone():
                return

            cursor.execute(
                    '''
                        INSERT INTO users 
                        (username, userid, debug, setting_dw, setting_notification) 
                        VALUES (?, ?, ?, ?, ?)
                        ''', (user[0], user[1], user[2], user[3], user[4])
            )

    def get_user(self, username: str = None) -> dict[str, bool | str | int] | list[dict[str, bool | str | int]]:
        with sqlite3.connect(self.path) as db:
            cursor = db.cursor()

            if username is not None:
                cursor.execute(
                        """
                        SELECT * FROM users WHERE username = ?
                        """, (username,)
                )

                user = cursor.fetchone()

                if user:
                    return dict(zip([column[0] for column in cursor.description], user))
            else:
                cursor.execute(
                        """
                        SELECT * FROM users
                        """, (username,)
                )

                users_db = cursor.fetchall()
                return [dict(zip([column[0] for column in cursor.description], user)) for user in users_db]

    def get_time_homework_cache(self, id_cache):
        with sqlite3.connect(self.path) as db:
            cursor = db.cursor()
            cursor.execute('SELECT ')


@user_class.get_user()
def main_button(user, message):
    murkup = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ')
    button2 = KeyboardButton('–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üìì')
    button3 = KeyboardButton('–°–æ—Ü. —Å–µ—Ç–∏ –∫–ª–∞—Å—Å–∞ üí¨')
    button4 = KeyboardButton('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
    murkup.add(button1, button2, button3, button4)
    if user and user.debug:
        button5 = KeyboardButton('–ö–æ–º–∞–Ω–¥—ã –¥–µ–±–∞–≥–∞')
        murkup.add(button5)
    return murkup


def restart(database):
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–∑ —Ñ–∞–π–ª–∞ –∫—ç—à–∞
    """
    with sqlite3.connect(database.path) as db:
        cursor = db.cursor()
        cursor.execute(
                '''
                CREATE TABLE IF NOT EXISTS users (
                    userid INTEGER PRIMARY KEY,
                    username TEXT NOT NULL,
                    debug INTEGER DEFAULT 0,
                    setting_dw INTEGER DEFAULT 0,
                    setting_notification INTEGER DEFAULT 0,
                    homework INTEGER, FOREIGN KEY (homework) REFERENCES homework_cache(id)
                );
                '''
        )

        cursor.execute(
                '''
                CREATE TABLE IF NOT EXISTS homework_cache (
                    id INTEGER PRIMARY KEY ,
                    cache TEXT 
                );
                '''
        )

        cursor.execute('SELECT * FROM users')
        users = cursor.fetchall()
        try:
            for user in users:
                user_dict = dict(zip([column[0] for column in cursor.description], user))
                # logger.debug(user_dict)
                user_r = user_class(
                        user_dict.get('username'), user_dict.get('user_id'),
                        setting_dw=user_dict.get('setting_dw'),
                        setting_notification=user_dict.get('setting_notification'),
                        debug=user_dict.get('debug')
                )
                murkup = ReplyKeyboardMarkup()
                button1 = KeyboardButton('/start')
                murkup.add(button1)
                # bot.send_message(user.get('chat_id'), '–ë–æ—Ç –≤–Ω–æ–≤—å –∑–∞–ø—É—â–µ–Ω!\n–î–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ –±—É–¥–µ—Ç –ª–∏—à–Ω–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /start', disable_notification=user.setting_notification, reply_markup=murkup)
        except AttributeError:
            pass


# –°–¢–ê–†–¢!
@bot.message_handler(commands=['start'])
def start(message):
    logger.info(f'–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∏ ({message.from_user.username})')
    murkup = main_button(message=message)
    user_class(message.from_user.username, message.from_user.id)
    with open('../–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.png', 'rb') as file:
        bot.send_photo(
                message.chat.id,
                photo=file,
                caption='''
–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–ª—è–Ω—É—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–∑, –∏ —Ç.–¥.
–ù–∞–π–¥—ë—Ç–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∏—Ç–µ: @Lynx20wz )\n\nP.S: –¢–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤ —Ü–µ–ª—è—Ö –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫ —è –≤–µ–¥—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å,
—è –≤–∏–∂—É –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∏ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º (–Ω–∞ —Ñ–æ—Ç–æ –≤–∏–¥–Ω–æ).
                ''',
                reply_markup=murkup
        )


@bot.message_handler(func=lambda message: message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ')
def timetable(message):
    day_of_week = datetime.now().isoweekday()
    if day_of_week in [5, 6, 7]:
        name_of_day = ps.get_weekday(1)
    else:
        name_of_day = ps.get_weekday(day_of_week + 1)
    output = f'*{name_of_day} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ*:\n'
    logger.debug(name_of_day)
    for i, lesson in enumerate(timetable_dict.get('schedule').get(name_of_day), 1):
        lesson_subject = timetable_dict.get('subjects').get(lesson[0])
        lesson_subjects = ', '.join(lesson_subject)
        if lesson_subjects == '':
            lesson_subjects = '–ü—Ä–µ–¥–º–µ—Ç—ã –Ω–µ –Ω—É–∂–Ω—ã!'
        output += f'{i}) {lesson[0]} ({lesson[1]}) - {lesson_subjects}\n'
    logger.info(f'–í—ã–∑–≤–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({message.from_user.username})')
    output += f'-------------------------------\n–ò—Ç–æ–≥–æ:\n–¢–µ—Ç—Ä–∞–¥–µ–π: {output.count('—Ç–µ—Ç—Ä–∞–¥—å')}\n–£—á–µ–±–Ω–∏–∫–æ–≤: {output.count('—É—á–µ–±–Ω–∏–∫')}'
    with open('D:\\System folder\\Pictures\\–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ 8 –∫–ª–∞—Å—Å.png', 'rb') as file:
        bot.send_photo(message.chat.id, file, caption=output, parse_mode='Markdown')


@bot.message_handler(func=lambda message: message.text == '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üìì')
@user_class.get_user()
def homework(message: Message, user: user_class) -> None:
    """
    –í—ã—Å—ã–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    # TODO: –£–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–Ω–∏–∑—É
    bot.send_message(message.chat.id, '–í—Ä–µ–º–µ–Ω–Ω–æ —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç üò•(')

    logger.info(f'–í—ã–∑–≤–∞–Ω–∞ –¥–æ–º–∞—à–∫–∞ ({message.from_user.username})')
    # link: bool = False

    # if datetime.now() - datetime.strptime(cache.time, '%Y-%m-%d-%H:%M:%S') < timedelta(minutes=45) and cache.cache.get('homework'):
    #
    # else:
    #     logger.info('–î–æ–º–∞—à–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
    #     hk = ps.full_parse()
    #     cache.homework_record(hk)
#
#     output = ''
#     if user.setting_dw:  # –ï—Å–ª–∏ setting_dw —Ä–∞–≤–µ–Ω True, –≤—ã–≤–æ–¥–∏–º –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
#         for i, one_day in enumerate(hk.values(), start=1):
#             day_of_week = ps.get_weekday(i)
#             output += f'\n*{day_of_week}*:\n'
#             for number_lesson, lesson in enumerate(one_day, start=1):
#                 output += f'{number_lesson}) {lesson[0]} ({lesson[1]}) - {lesson[2]}\n'
#                 if 'https://' in lesson[2]:
#                     link = True
#         output += f'-------------------------------\n–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ —É—Ä–æ–∫–æ–≤: {sum(len(day) for day in hk.values())}'
#     else:  # –ï—Å–ª–∏ False —Ç–æ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
#         today_index = datetime.now().isoweekday()
#
#         if today_index in [5, 6, 7]:
#             next_day_index = 1
#         else:
#             next_day_index = today_index + 1
#
#         day_of_week = ps.get_weekday(next_day_index)
#         output += f'\n*{day_of_week}*:\n'
#         one_day = hk.get(day_of_week)
#
#         logger.debug(f'{next_day_index} - {today_index}) {one_day}')
#         for number_lesson, lesson in enumerate(one_day, start=1):
#             output += f'{number_lesson}) {lesson[0]} ({lesson[1]}) - {lesson[2]}\n'
#             if 'https://' in lesson[2]:
#                 link = True
#         output += f'-------------------------------\n–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ —É—Ä–æ–∫–æ–≤: {len(one_day)}'
#     if link:
#         murkup = InlineKeyboardMarkup()
#         button1 = InlineKeyboardButton(text='–ë–æ—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –¶–î–ó', url='https://t.me/CDZ_AnswersBot')
#         murkup.add(button1)
#         bot.send_message(message.chat.id, output, parse_mode="Markdown", reply_markup=murkup, disable_notification=user.setting_notification)
#     else:
#         bot.send_message(message.chat.id, output, parse_mode="Markdown", disable_notification=user.setting_notification)


@bot.message_handler(func=lambda message: message.text == '–°–æ—Ü. —Å–µ—Ç–∏ –∫–ª–∞—Å—Å–∞ üí¨')
def social_networks(message):
    murkup = InlineKeyboardMarkup()
    button1 = InlineKeyboardButton('–û—Ñ. –≥—Ä—É–ø–ø–∞', 'https://chat.whatsapp.com/Dz9xYMsfWoy3E7smQHimDg')
    button2 = InlineKeyboardButton('–ü–æ–¥–ø–æ–ª–∫–∞', 'https://chat.whatsapp.com/GvkRfG5W5JoApXrnu4T9Yo')
    murkup.add(button1, button2)
    bot.send_message(
        message.chat.id,
            '–ö–æ–Ω–µ—á–Ω–æ! –î–µ—Ä–∂–∏:\n\n–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ WhatsApp: https://chat.whatsapp.com/Dz9xYMsfWoy3E7smQHimDg (—Å–æ–∑–¥–∞—Ç–µ–ª—å @Lynx20wz)\n–ü–æ–¥–ø–æ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ WhatsApp: https://chat.whatsapp.com/GvkRfG5W5JoApXrnu4T9Yo (—Å–æ–∑–¥–∞—Ç–µ–ª—å @Juggernaut_45)\n\n –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @Lynx20wz)',
        reply_markup=murkup
        )


# Settings
def make_setting_button(user):
    murkup = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton('–ù–∞–∑–∞–¥')
    button2 = KeyboardButton('–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é' if user.setting_dw else '–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å')
    button3 = KeyboardButton('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.' if user.setting_notification else '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.')
    murkup.add(button1, button2, button3)
    return murkup


@bot.message_handler(func=lambda message: message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
@user_class.get_user()
def settings(message, user):
    logger.info(f'–í—ã–∑–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ({message.from_user.username})')
    murkup = make_setting_button(user)
    bot.send_message(
        message.chat.id,
            '''
    –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n*–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å\\–Ω–µ–¥–µ–ª—é:*\n\t1) *"–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å":* –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
    –í –ø—è—Ç–Ω–∏—Ü—É, —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.\n\t
    2) *"–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é":* –ë—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.\n\n*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*\n\t
    1) *"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.":* –≤–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\t
    2) *"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.":* –æ—Ç–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
             ''',
        reply_markup=murkup, parse_mode='Markdown', disable_notification=user.setting_notification
        )


@bot.message_handler(func=lambda message: message.text in ['–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é', '–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å'])
@user_class.get_user()
def change_delivery(message, user):
    if message.text == '–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é':
        user.setting_dw = False
    elif message.text == '–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å':
        user.setting_dw = True
    murkup = make_setting_button(user)
    user.save_settings(setting_dw=user.setting_dw)
    logger.info(f'–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–¥–∞—á–∏ ({message.from_user.username} - {user.setting_dw} ({user.data}))')
    bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!', reply_markup=murkup, disable_notification=user.setting_notification)


@bot.message_handler(func=lambda message: message.text in ['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.'])
@user_class.get_user()
def change_notification(message, user):
    if message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.':
        user.setting_notification = False
    elif message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.':
        user.setting_notification = True
    murkup = make_setting_button(user)
    user.save_settings(setting_notification=user.setting_notification)
    logger.info(f'–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ({message.from_user.username} - {user.setting_notification} ({user.data}))')
    bot.send_message(message.chat.id, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!', reply_markup=murkup, disable_notification=user.setting_notification)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
@user_class.get_user()
def exit_settings(message, user):
    logger.debug(f'{user.setting_dw} - {user.setting_notification}')
    logger.info(f'–í—ã—à–µ–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ({message.from_user.username})')
    user.save_settings(user.setting_dw, user.setting_notification, True)
    bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_button(message=message), disable_notification=user.setting_notification)


# Debug
@bot.message_handler(func=lambda message: message.text == 'Debug')
@user_class.get_user()
def developer(message, user):
    if message.from_user.id == ADMIN_ID:
        user.debug = True
        user.save_settings(debug=user.debug, save_cache=True, database=db)
        bot.send_message(message.chat.id, f'–£–¥–∞—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, {user.username}! üòâ', reply_markup=main_button(message))
        logger.warning(f'{user.username} –ø–æ–ª—É—á–∏–ª —Ä–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞!')
    else:
        bot.send_message(message.chat.id, '–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º! üòë', reply_markup=main_button(message))
        logger.warning(f'{user.username} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞')


def make_debug_button():
    murkup = ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = KeyboardButton('–ù–∞–∑–∞–¥')
    button2 = KeyboardButton('–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    button3 = KeyboardButton('–í—ã–∫–ª. –¥–µ–±–∞–≥')
    murkup.add(button1, button2, button3)
    return murkup


@bot.message_handler(func=lambda message: message.text == '–ö–æ–º–∞–Ω–¥—ã –¥–µ–±–∞–≥–∞')
def command_debug(message):
    bot.send_message(message.chat.id, f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Ç—É—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–ª—è —Ç–µ–±—è –∫–æ–º–∞–Ω–¥—ã!', reply_markup=make_debug_button())


@bot.message_handler(func=lambda message: message.text == '–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
def get_user(message):
    bot.send_message(message.chat.id, f'{db.get_user(message.from_user.username)}')


@bot.message_handler(func=lambda message: message.text == '–í—ã–∫–ª. –¥–µ–±–∞–≥–∞')
@user_class.get_user()
def remove_debug(message, user):
    user.debug = False
    user.save_settings(debug=user.debug, save_cache=True, database=db)
    bot.send_message(message.chat.id, f'–í—ã–∫–ª—é—á–∞—é –¥–µ–±–∞–≥...', reply_markup=main_button(message))
    logger.debug(f'{user.username} –æ—Ç–∫–ª—é—á–∏–ª —Ä–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.')


@bot.message_handler(func=lambda message: message.text == '–ù–∞–∑–∞–¥')
@user_class.get_user()
def exit_settings(message, user):
    logger.debug(f'{user.setting_dw} - {user.setting_notification}')
    logger.info(f'–í—ã—à–µ–ª –∏–∑ –∫–æ–º–∞–Ω–¥ –¥–µ–±–∞–≥–∞ ({message.from_user.username})')
    bot.send_message(message.chat.id, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_button(message=message), disable_notification=user.setting_notification)

@bot.message_handler(func=lambda message: message.text)
@user_class.get_user()
def unknown_command(message, user):
    logger.error(f'–í—ã–∑–≤–∞–Ω–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–æ–º–∞–Ω–¥–∞! ({message.from_user.username}):\n"{message.text}"')
    bot.send_message(
            message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ—Ç —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.",
            disable_notification=user.setting_notification
        )



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    db = DataBase('../temp/DataBase.db')
    with open('../schedule.json', 'r', encoding='utf-8') as file:
        timetable_dict = json.load(file)
    restart(database=db)
    bot.polling(none_stop=True)