import asyncio
import json
import re
import sys
from datetime import datetime, timedelta

from aiogram import Bot, F, Dispatcher
from aiogram.filters.command import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, BufferedInputFile

import parser as ps
from bin import UserClass, API_BOT, logger, db, main_button, social_networks_button, make_setting_button
from handlers import Handlers

bot = Bot(API_BOT)
dp = Dispatcher()


async def restart():
    """
    –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î
    """
    users = await db.restart_bot(False if '-back' in sys.argv else True)
    for user in users:
        UserClass(
                user.get('username'),
                user.get('userid'),
                bool(user.get('debug')),
                bool(user.get('setting_dw')),
                bool(user.get('setting_notification')),
                user.get('token'),
                user.get('student_id'),
                user.get('homework_id'),
        )
    logger.debug('–ë–æ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç!')


# –°–¢–ê–†–¢!
@dp.message(F.text, Command("start"))
@UserClass.get_user()
async def start(message: Message, user: UserClass):
    logger.info(f'–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∏ ({message.from_user.username})')
    with open('../–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.png', 'rb') as file:
        await message.answer_photo(
                photo=BufferedInputFile(file.read(), filename='–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'),
                caption='''–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–ª—è–Ω—É—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–∑, –∏ —Ç.–¥. –ù–∞–π–¥—ë—Ç–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∏—Ç–µ: @Lynx20wz)
                \nP.S: –¢–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤ —Ü–µ–ª—è—Ö –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫ —è –≤–µ–¥—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å, —è –≤–∏–∂—É –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∏ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º (–Ω–∞ —Ñ–æ—Ç–æ –≤–∏–¥–Ω–æ).''',
                reply_markup=main_button(user)
        )


@dp.message(F.text == '–û—Ü–µ–Ω–∫–∏ üìù')
@UserClass.get_user()
async def marks(message: Message, user: UserClass):
    if not user.check_token():
        await message.answer('–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /token, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ!')
        return
    logger.info(f'–í—ã–∑–≤–∞–Ω—ã –æ—Ü–µ–Ω–∫–∏ ({message.from_user.username})')
    response = ps.get_marks(user.student_id, user.token)
    output = ''
    for lesson in response['payload']:
        day_of_week = ps.get_weekday(datetime.strptime(lesson['date'], '%Y-%m-%d').isoweekday())
        if day_of_week not in output:
            output += f'*{day_of_week}:*\n'
        output += f'\t- {lesson["subject_name"]}: {lesson["value"]}\n'

    await message.answer(output, reply_markup=main_button(user), disable_notification=user.setting_notification, parse_mode='Markdown')


@dp.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ')
@UserClass.get_user()
async def schedule(message: Message, user: UserClass):
    if not user.check_token():
        await message.answer('–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /token, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ!')
        return
    name_of_day, schedule = ps.get_schedule(user.token)
    output = f'*{name_of_day}:*\n'
    for lesson in schedule['response']:
        output += f'\t- {lesson['subject_name']} ({lesson["room_number"]})\n'
    output += f'-------------------------------\n–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {schedule['total_count']}\n'
    logger.info(f'–í—ã–∑–≤–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({message.from_user.username})')
    await message.answer(output, parse_mode='Markdown')


@dp.message(F.text == '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üìì')
@UserClass.get_user()
async def homework(message: Message, user: UserClass) -> None:
    """
    –í—ã—Å—ã–ª–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param message: –ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    :param user: –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """

    logger.info(f'–í—ã–∑–≤–∞–Ω–∞ –¥–æ–º–∞—à–∫–∞ ({message.from_user.username})')
    link: bool = False

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    msg = await message.answer('–û–∂–∏–¥–∞–π—Ç–µ... ‚åõ')
    if not user.check_token():
        await message.answer('–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /token, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ!')
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–∫—É
    pre_hk = await db.get_homework(user.username)
    if pre_hk is not None and (datetime.now() - pre_hk[0]) < timedelta(hours=1):
        hk = json.loads(pre_hk[1])
    else:
        try:
            hk = ps.full_parse(token=user.token, student_id=user.student_id, parsing=True)
            await db.update_homework_cache(user.username, homework=hk)
            logger.info('–î–æ–º–∞—à–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
        except ValueError as e:
            logger.warning(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∑: {e}')
            return

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–∞—à–∫—É
    output = ''
    if user.setting_dw:  # –ï—Å–ª–∏ setting_dw —Ä–∞–≤–µ–Ω True, –≤—ã–≤–æ–¥–∏–º –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
        for i, one_day in enumerate(hk.values(), start=1):
            day_of_week = ps.get_weekday(i)
            output += f'\n*{day_of_week}*:\n'
            for number_lesson, lesson in enumerate(one_day, start=1):
                output += f'{number_lesson}) {lesson[0]} ({lesson[1]}) - {lesson[2]}\n'
                if 'https://' in lesson[2]:
                    link = True
        output += f'-------------------------------\n–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ —É—Ä–æ–∫–æ–≤: {sum(len(day) for day in hk.values())}'
    else:  # –ï—Å–ª–∏ False —Ç–æ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
        today_index = datetime.now().isoweekday()

        if today_index in [5, 6, 7]:
            next_day_index = 1
        else:
            next_day_index = today_index + 1

        day_of_week = ps.get_weekday(next_day_index)
        output += f'\n*{day_of_week}*:\n'
        one_day = hk.get(day_of_week)

        # logger.debug(f'{next_day_index} - {today_index}) {one_day}')
        for number_lesson, lesson in enumerate(one_day, start=1):
            output += f'{number_lesson}) {lesson[0]} ({lesson[1]}) - {lesson[2]}\n'
            if 'https://' in lesson[2]:
                link = True
        output += f'-------------------------------\n–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ —É—Ä–æ–∫–æ–≤: {len(one_day)}'
    await bot.delete_message(message.chat.id, msg.message_id)
    if link:
        murkup = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text='–ë–æ—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –¶–î–ó', url='https://t.me/solving_CDZ_tests_bot')]])
        await message.answer(output, parse_mode="Markdown", reply_markup=murkup, disable_notification=user.setting_notification)
    else:
        await message.answer(output, parse_mode="Markdown", disable_notification=user.setting_notification)


@dp.message(F.text == '–°–æ—Ü. —Å–µ—Ç–∏ –∫–ª–∞—Å—Å–∞ üí¨')
async def social_networks(message):
    await message.answer(
            text=
            r"""
–ö–æ–Ω–µ—á–Ω–æ! –î–µ—Ä–∂–∏:

[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ WhatsApp](https://chat.whatsapp.com/Dz9xYMsfWoy3E7smQHimDg) (—Å–æ–∑–¥–∞—Ç–µ–ª—å @Lynx20wz)
[–ü–æ–¥–ø–æ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ WhatsApp](https://chat.whatsapp.com/GvkRfG5W5JoApXrnu4T9Yo) (—Å–æ–∑–¥–∞—Ç–µ–ª—å @Juggernaut\_45)

–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @Lynx20wz)
""",
            reply_markup=social_networks_button(),
            parse_mode='Markdown'
    )


# Settings
@dp.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
@UserClass.get_user()
async def settings(message: Message, user: UserClass):
    logger.info(f'–í—ã–∑–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ({message.from_user.username})')
    murkup = make_setting_button(user)
    await message.answer(
            text=r'''
–ù–∞—Å—Ç—Ä–æ–π–∫–∏:

*–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å\–Ω–µ–¥–µ–ª—é:*
    1) *"–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å":* –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
–í –ø—è—Ç–Ω–∏—Ü—É, —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.
    2) *"–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é":* –ë—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.
    
*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
    1) *"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.":* –≤–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    2) *"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.":* –æ—Ç–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
            ''',
            reply_markup=murkup, parse_mode='Markdown',
            disable_notification=user.setting_notification
    )


@dp.message(F.text.in_(['–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é', '–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å']))
@UserClass.get_user()
async def change_delivery(message: Message, user: UserClass):
    if message.text == '–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é':
        user.setting_dw = False
    elif message.text == '–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å':
        user.setting_dw = True
    murkup = make_setting_button(user)
    await user.save_settings(setting_dw=user.setting_dw)
    logger.info(f'–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–¥–∞—á–∏ ({message.from_user.username} - {user.setting_dw} ({user.data}))')
    await message.answer(
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!',
            reply_markup=murkup,
            disable_notification=user.setting_notification
    )


@dp.message(F.text.in_(['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.']))
@UserClass.get_user()
async def change_notification(message: Message, user: UserClass):
    if message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.':
        user.setting_notification = False
    elif message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.':
        user.setting_notification = True
    murkup = make_setting_button(user)
    await user.save_settings(setting_notification=user.setting_notification)
    logger.info(f'–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ({message.from_user.username} - {user.setting_notification} ({user.data}))')
    await message.answer(
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!',
            reply_markup=murkup,
            disable_notification=user.setting_notification
    )


@dp.message(F.text == '–ù–∞–∑–∞–¥')
@UserClass.get_user()
async def exit_settings(message: Message, user: UserClass):
    logger.info(f'–í—ã—à–µ–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ({message.from_user.username})')
    await user.save_settings(setting_dw=user.setting_dw, setting_notification=user.setting_notification, debug=user.debug, save_db=True)
    await message.answer(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=main_button(user),
            disable_notification=user.setting_notification
    )


# –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
@UserClass.get_user()
async def delete_user(message: Message, user: UserClass):
    await db.delete_user(user.username)
    await message.answer('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')


async def main():
    Handlers(dp).register_all()
    await bot.delete_webhook(drop_pending_updates=True)
    await restart()
    try:
        await dp.start_polling(bot)
    finally:
        await db.backup_create()
        await bot.close()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
