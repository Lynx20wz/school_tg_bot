import asyncio
import re
import sys
from datetime import datetime, timedelta

from aiogram import Bot, F, Dispatcher
from aiogram.filters.command import Command
from aiogram.types import (
    Message,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    BufferedInputFile,
)

from bin import (
    UserClass,
    API_BOT,
    logger,
    db,
    parser,
    main_button,
    social_networks_button,
    make_setting_button,
    ExpiredToken,
    NoToken,
    ServerError
)
from handlers import Handlers

bot = Bot(API_BOT)
dp = Dispatcher()

MAX_WIDTH_MESSAGE = 33


async def _exception_handler(user: UserClass, message: Message, function: callable, *args, **kwargs):
    """

    Args:
        user (UserClass): A user for which the function is called
        message (Message): A message for which the function is called
        function (callable): The function to be called

    Returns:
        Either notify the user that an exception has happened
        or return the result of the function completion
    """
    try:
        if not user.token:
            raise NoToken()
        result = function(token=user.token, *args, **kwargs)
    except (ExpiredToken, NoToken, ServerError) as e:
        logger.warning(f'{function.__name__} | {user.username}: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}')
        await message.answer(e.args[0])
        return
    return result


async def restart():
    users = await db.restart_bot(False if '-back' in sys.argv else True)
    for user in users:
        UserClass(
                user.get('username'),
                user.get('userid'),
                bool(user.get('debug', False)),
                bool(user.get('setting_dw', False)),
                bool(user.get('setting_notification', True)),
                bool(user.get('setting_hide_link', False)),
                user.get('token'),
                user.get('student_id'),
                user.get('homework_id'),
        )
    logger.debug('–ë–æ—Ç —Ä–µ—Å—Ç–∞—Ä—Ç!')


# –°–¢–ê–†–¢!
@dp.message(F.text, Command('start'))
@UserClass.get_user()
async def start(message: Message, user: UserClass):
    logger.info(f'–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∏ ({message.from_user.username})')
    with open('–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.png', 'rb') as file:
        await message.answer_photo(
                photo=BufferedInputFile(file.read(), filename='–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'),
                caption="""–ü—Ä–∏–≤–µ—Ç. –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –≤–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–∞! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –≥–ª—è–Ω—É—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –¥–∑, –∏ —Ç.–¥. –ù–∞–π–¥—ë—Ç–µ –æ—à–∏–±–∫–∏ —Å–æ–æ–±—â–∏—Ç–µ: @Lynx20wz)
                \nP.S: –¢–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω —Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤ —Ü–µ–ª—è—Ö –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫ —è –≤–µ–¥—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —Ç–æ –µ—Å—Ç—å, —è –≤–∏–∂—É –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∏ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º (–Ω–∞ —Ñ–æ—Ç–æ –≤–∏–¥–Ω–æ).""",
                reply_markup=main_button(user),
        )


@dp.message(F.text == '–û—Ü–µ–Ω–∫–∏ üìù')
@UserClass.get_user()
async def marks(message: Message, user: UserClass):
    logger.info(f'–í—ã–∑–≤–∞–Ω—ã –æ—Ü–µ–Ω–∫–∏ ({message.from_user.username})')
    response = await _exception_handler(user, message, parser.get_marks, user.student_id)
    if not response:
        return
    date, response = response
    output = f'–û—Ü–µ–Ω–∫–∏ –∑–∞ –Ω–µ–¥–µ–ª—é {date[0].strftime("%d.%m")} - {date[1].strftime("%d.%m")}:\n'

    if response['payload']:
        for lesson in response['payload']:
            day_of_week = parser.get_weekday(datetime.strptime(lesson['date'], '%Y-%m-%d').isoweekday())
            if day_of_week not in output:
                output += f'\t*{day_of_week}:*\n'
            output += f'\t\t- _{lesson["subject_name"]}: *{lesson["value"]}*_\n'
    else:
        output += '\t‚îî –û—Ü–µ–Ω–∫–∏ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'

    output = re.sub(r'([\[(.\])-])', r'\\\1', output)
    await message.answer(
            output,
            reply_markup=main_button(user),
            disable_notification=user.setting_notification,
            parse_mode='MarkdownV2',
    )


@dp.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÖ')
@UserClass.get_user()
async def schedule(message: Message, user: UserClass):
    logger.info(f'–í—ã–∑–≤–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ({message.from_user.username})')
    response = await _exception_handler(user, message, parser.get_schedule)
    if not response:
        return
    date, schedule = response

    output = (
            f'*–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {parser.get_weekday(date.isoweekday())} ({date.strftime("%d.%m")}):*\n'
            + '\n'.join(
            f'\t{"‚îú‚îî"[i == len(schedule["response"]) - 1]} {lesson["subject_name"]} ({lesson["room_number"]})'
            for i, lesson in enumerate(schedule['response'])
    )
    )

    output += f'\n{'-' * min(MAX_WIDTH_MESSAGE, len(output))}\n–í—Å–µ–≥–æ —É—Ä–æ–∫–æ–≤: {schedule["total_count"]}\n'
    await message.answer(re.sub(r'([\[(.\])-])', r'\\\1', output), parse_mode='MarkdownV2')


@dp.message(F.text == '–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ üìì')
@UserClass.get_user()
async def homework(message: Message, user: UserClass):
    """
    Sends the text of homework in accordance with the user settings.

    : Param Message: received message.
    : Param User: User Object.
    """

    logger.info(f'–í—ã–∑–≤–∞–Ω–∞ –¥–æ–º–∞—à–∫–∞ ({message.from_user.username})')
    link: bool = False

    msg = await message.answer('–û–∂–∏–¥–∞–π—Ç–µ... ‚åõ')

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–∫—É
    pre_hk = await db.get_homework(user.username)
    if all(pre_hk) and (datetime.now() - pre_hk[0]) < timedelta(hours=1):
        hk = pre_hk[1]
    else:
        hk = await _exception_handler(user, message, parser.full_parse)
        if not hk:
            await msg.delete()
            return

        await db.save_homework(user.username, hk)
        await message.answer('–î–æ–º–∞—à–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')

    async def get_output_for_day(link: bool, day_name: str) -> str:
        one_day = hk.get(day_name)
        begin_date, end_date = map(
                lambda x: datetime.fromisoformat(x).strftime('%d.%m'),
                hk.get('date', {}).values(),
        )
        output = f'\n*–î–æ–º–∞—à–∫–∞ –Ω–∞ {day_name} ({begin_date + "-" + end_date if user.setting_dw else begin_date})*:\n'
        for lesson in one_day:
            if lesson['links']:
                logger.debug(f'{user.setting_hide_link=}')
                if user.setting_hide_link:
                    lesson['links'] = (
                        f'\t‚îî {"\n\t\t\t".join(f"[–¶–î–ó {i}]({exam})" for i, exam in enumerate(lesson["links"], start=1))}\n'
                    )
                else:
                    lesson['links'] = (
                        f'\t‚îî {"\n\t\t\t".join(f"{re.sub(r'([=_])', r'\\\1', exam)}" for i, exam in enumerate(lesson["links"], start=1))}\n'
                    )
            else:
                lesson['links'] = ''
            if not link and 'https://' in lesson['homework']:
                link = True
            output += f'*‚Ä¢ {lesson["name"]}:*\n\t{"‚îú" if lesson["links"] else "‚îî"} _{lesson["homework"].strip()}_\n{lesson["links"]}'
        output += f'{"-" * min(MAX_WIDTH_MESSAGE, len(max(output.split("\n"), key=len)))}\n–í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–æ —É—Ä–æ–∫–æ–≤: {len(one_day)}'
        output = '\n'.join(
                [
                    re.sub(r'([+[.\]()#~-])', r'\\\1', line) if not '[–¶–î–ó' in line else line
                    for line in output.split('\n')
                ]
        )
        return output

    await bot.delete_message(message.chat.id, msg.message_id)
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–∞—à–∫—É
    if user.setting_dw:  # –ï—Å–ª–∏ setting_dw —Ä–∞–≤–µ–Ω True, –≤—ã–≤–æ–¥–∏–º –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
        output = ''
        for i in range(1, 6):
            output += await get_output_for_day(link, parser.get_weekday(i)) + '\n'
    else:  # –ï—Å–ª–∏ False —Ç–æ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
        today_index = datetime.now().isoweekday()

        # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —Å—É–±–±–æ—Ç–∞ –∏–ª–∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, —Ç–æ –≤—ã–≤–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–∏ÃÜ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        if today_index in [5, 6, 7]:
            next_day_index = 1
        else:
            next_day_index = today_index + 1

        day_name = parser.get_weekday(next_day_index)
        output = await get_output_for_day(link, day_name)

    logger.debug(output)

    if link:
        murkup = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                                text='–ë–æ—Ç –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –¶–î–ó',
                                url='https://t.me/solving_CDZ_tests_bot',
                        )
                    ]
                ]
        )
        await message.answer(
                output,
                parse_mode='MarkdownV2',
                reply_markup=murkup,
                disable_notification=user.setting_notification,
        )
    else:
        await message.answer(
                output,
                parse_mode='MarkdownV2',
                disable_notification=user.setting_notification,
        )


@dp.message(F.text == '–°–æ—Ü. —Å–µ—Ç–∏ –∫–ª–∞—Å—Å–∞ üí¨')
async def social_networks(message):
    await message.answer(
            text=r"""
–ö–æ–Ω–µ—á–Ω–æ! –î–µ—Ä–∂–∏:

[–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ WhatsApp](https://chat.whatsapp.com/Dz9xYMsfWoy3E7smQHimDg) (—Å–æ–∑–¥–∞—Ç–µ–ª—å @Lynx20wz)
[–ü–æ–¥–ø–æ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞ –≤ WhatsApp](https://chat.whatsapp.com/GvkRfG5W5JoApXrnu4T9Yo) (—Å–æ–∑–¥–∞—Ç–µ–ª—å @Juggernaut\_45)

–ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @Lynx20wz)
""",
            reply_markup=social_networks_button(),
            parse_mode='Markdown',
    )


# Settings
@dp.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è')
@UserClass.get_user()
async def settings(message: Message, user: UserClass):
    logger.info(f'–í—ã–∑–≤–∞–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ({message.from_user.username})')
    murkup = make_setting_button(user)
    await message.answer(
            text=r"""
–ù–∞—Å—Ç—Ä–æ–π–∫–∏:

*–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å\–Ω–µ–¥–µ–ª—é:*
    1) *"–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å":* –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
–í –ø—è—Ç–Ω–∏—Ü—É, —Å—É–±–±–æ—Ç—É –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫.
    2) *"–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é":* –ë—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å—Å—è –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏.

*–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
    1) *"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.":* –≤–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    2) *"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.":* –æ—Ç–∫–ª—é—á–∞–µ—Ç –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.

*–°–∫—Ä—ã—Ç–∏–µ —Å—Å—ã–ª–æ–∫:*
    1) *"–°–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫–∏":* —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã –ø–æ–¥ "–¶–î–ó".
    2) *"–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏":* —Å—Å—ã–ª–∫–∏ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –Ω–∞–ø—Ä—è–º—É—é.
            """,
            reply_markup=murkup,
            parse_mode='Markdown',
            disable_notification=user.setting_notification,
    )


@dp.message(F.text.in_(['–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é', '–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å']))
@UserClass.get_user()
async def change_delivery(message: Message, user: UserClass):
    if message.text == '–í—ã–¥–∞—á–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é':
        user.setting_dw = False
    elif message.text == '–í—ã–¥–∞—á–∞ –Ω–∞ –¥–µ–Ω—å':
        user.setting_dw = True
    murkup = make_setting_button(user)
    await user.save_settings(setting_dw=user.setting_dw)
    logger.info(f'–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—ã–¥–∞—á–∏ ({message.from_user.username} - {user.setting_dw} ({user.data}))')
    await message.answer(
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!',
            reply_markup=murkup,
            disable_notification=user.setting_notification,
    )


@dp.message(F.text.in_(['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.', '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.']))
@UserClass.get_user()
async def change_notification(message: Message, user: UserClass):
    if message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª.':
        user.setting_notification = False
    elif message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª.':
        user.setting_notification = True
    murkup = make_setting_button(user)
    await user.save_settings(setting_notification=user.setting_notification)
    logger.info(f'–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ({message.from_user.username} - {user.setting_notification} ({user.data}))')
    await message.answer(
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!',
            reply_markup=murkup,
            disable_notification=user.setting_notification,
    )


@dp.message(F.text.in_(['–°–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫–∏', '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏']))
@UserClass.get_user()
async def change_link(message: Message, user: UserClass):
    if message.text == '–°–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫–∏':
        user.setting_hide_link = True
    elif message.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫–∏':
        user.setting_hide_link = False
    murkup = make_setting_button(user)
    await user.save_settings(setting_hide_link=user.setting_hide_link)
    logger.info(
            f'–ò–∑–º–µ–Ω–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Å—ã–ª–æ–∫ ({message.from_user.username} - {user.setting_hide_link} ({user.data}))'
    )
    await message.answer(
            '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!',
            reply_markup=murkup,
            disable_notification=user.setting_notification,
    )


@dp.message(F.text == '–ù–∞–∑–∞–¥')
@UserClass.get_user()
async def exit_settings(message: Message, user: UserClass):
    logger.info(f'–í—ã—à–µ–ª –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ({message.from_user.username})')
    await user.save_settings(
            setting_dw=user.setting_dw,
            setting_notification=user.setting_notification,
            setting_hide_link=user.setting_hide_link,
            debug=user.debug,
            save_db=True,
    )
    await message.answer(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            reply_markup=main_button(user),
            disable_notification=user.setting_notification,
    )


# –ø–æ–ª–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text == '–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
@UserClass.get_user()
async def delete_user(message: Message, user: UserClass):
    await db.delete_user(user.username)
    await message.answer('–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!')


async def main():
    Handlers(dp).register_all()
    await bot.delete_webhook(drop_pending_updates=True)
    await restart()
    try:
        await dp.start_polling(bot)
    finally:
        await db.backup_create()
        await bot.close()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    asyncio.run(main())
